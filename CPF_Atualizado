import re, datetime

#--------------------------------------------
# Validação de CPF com lambda (código mais curto)
#--------------------------------------------
class Cpf_Validador:

    def EValido(self, number):

        # comprimento inválido ou dígitos repetidoss
        if len(number) != 11 or re.search(r"(\d)(\1{10})", number): return False       

        for i in reversed(range(1, 3)):
            digit = sum(map(lambda e: e[0] * int(e[1]), enumerate(reversed(list(number[:-i])), start = 2))) % 11
            if int(number[-i]) != (0 if digit < 3 else 11 - digit): return False

        return True



#--------------------------------------------
# Validação de CPF
#--------------------------------------------
class Cpf_Validador1:

    def EValido(self, number):

        # comprimento inválido ou dígitos repetidos
        if len(number) != 11 or re.search(r"(\d)(\1{10})", number): return False        

        for cycle in range(2):

            limitIndex = 9 if cycle == 0 else 10
            baseWeight = limitIndex + 1
            temp = 0

            for index in range(0, limitIndex):
                temp += int(number[index]) * (baseWeight - index)

            temp %= 11
            digit = 0 if temp < 2 else 11 - temp

            if digit != int(number[limitIndex]):
                return False

        return True

#--------------------------------------------
# Validação de CPF com lista de compreensão
#--------------------------------------------
class Cpf_Validador2:

    def EValido(self, number):

        # comprimento inválido ou dígitos repetidos
        if len(number) != 11 or re.search(r"(\d)(\1{10})", number): return False        

        for cycle in range(2):

            limitIndex = 11 if cycle == 0 else 12
            cpf = list(number[: limitIndex - 2])

            digit = sum([int(x) * y for x, y in zip(cpf, [n for n in reversed(range(1, limitIndex))])]) % 11
            digit = 0 if temp < 2 else 11 - temp

            if digit != int(number[limitIndex - 2]): return False

        return True

# main

cpf_Validador = Cpf_Validador()

while True:

    print()
    print("-"*41)
    print("Digite os digitos do CPF [Digite X para sair]")
    print("-"*41)

    cpf = input("CPF = ")
    if cpf.upper() == "X": break

    print ( " \n CPF é "  + ( "válido!"  if  cpfValidator . isValid ( cpf ) else  " INVÁLIDO !!!" ))

    print('-' * 50)
    agora = datetime.datetime.now()
    data_str = agora.strftime('%d/%m/%Y %H:%M')
    print(data_str)
    print('-' * 50)  
