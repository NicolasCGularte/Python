import re
from datetime import date, datetime

agora = datetime.now()
data_str = agora.strftime('%d/%m/%Y %H:%M')
print(data_str)

print('\n**** Insira um CPF completo (apenas números) ***\n')

ValorCPF = input('Digite o CPF: ') # receber entrada do CPF
entrada = re.findall("\d", ValorCPF) # remover caracteres NÃO numéricos

# validar quantidade de caracteres digitados
if len(ValorCPF) > 14 or len(entrada) < 11 or len(entrada) > 11:
    print('CPF INVÁLIDO')

# verificar se todos os dígitos são iguais
else:
    valid = 0
    for dig in range(0, 11):
        valid += int(entrada[dig])
        dig += 1
    if int(entrada[0]) == valid / 11:
        print("CPF INVÁLIDO")

    # rotina de cálculos do dígito verificador do CPF
    else:
        # verificação do 10º dígito verificador
        soma = 0
        count = 10
        for i in range(0, len(entrada)-2):
            soma = soma + (int(entrada[i])*count)
            i+=1
            count-=1
        dg1 = 11-(soma%11)
        if dg1 >= 10:
            dg1 = 0
        print(dig1)    

        # verificação do 11º dígito verificador
        soma = 0
        count = 10
        for j in range(1, len(entrada)-1):
            soma = soma + (int(entrada[j])*count)
            j+=1
            count-=1
        dg2 = 11-(soma%11)
        if dg2 >= 10:
            dg2 = 0
        print(dig2)    

        # mensagem ao usuário
        if int(entrada[9]) != dg1 or int(entrada[10]) != dg2:
            print("CPF INVÁLIDO")
        else:
            print('*** CPF VÁLIDO ***')

with open("resultado.txt", "a") as arquivo:
  # Gere e escreva o CPF no arquivo
  cpf = entrada
  arquivo.append(cpf)  


###############################################################################################################################################################



def lista_str_para_int(lista):
    """
    Comverte uma lista de string em uma lista de inteiros
    """
    n = len(lista)
    for n in range(n):
        lista[n] = int(lista[n])
    return lista


def valida_digito(cpf, digito):
    """
    Valida os dígitos do CPF após o '-'
    1 é o primeiro dígito após o '-'
    2 é o segundo dígito após o '-'
    """
    x = 0
    y = 9 + digito
    for n in range(len(cpf) - 3 + digito):
        x = x + cpf[n] * y
        y -= 1
    x = (x * 10) % 11
    if x == 10:
        x = 0
    if x != cpf[-3 + digito]:
        return False
    return True


def validacao_de_cpf(cpf):
    cpf = list(cpf)
    if cpf[3] != "." or cpf[7] != "." or cpf[-3] != "-":
        return "O formato de CPF digitado não é válido"
    cpf.remove(".")
    cpf.remove(".")
    cpf.remove("-")
    cpf = lista_str_para_int(cpf)
    if len(cpf) != 11:
        return "O formato de CPF digitado não é válido"
    if valida_digito(cpf, 1) and valida_digito(cpf, 2):
        return 'O CPF inserido é válido!'
    raise ValueError("O CPF inserido não é válido. Tente novamente.")


cpf_digitado = input("Digite um numero de CPF: ")
print(validacao_de_cpf(cpf_digitado))?




#########################################################################################################################################################





cpf=input('digite um cpf no formato xxx.xxx.xxx-xx:  ')
while len(cpf)!=14 or cpf[3]!='.' or cpf[7]!='.'or cpf[11]!='-':
    cpf=input('Digite um CPF no formato xxx.xxx.xxx-xx:   ')

while cpf[0]==cpf[1]==cpf[2]==cpf[4]==cpf[5]==cpf[6]==cpf[8]==cpf[9]==cpf[10]==cpf[12]==cpf[13]:
    cpf=input('CPF inválido, digite um CPF válido:    ')

validacao1= ((int(cpf[0])*10 + int(cpf[1])*9 + int(cpf[2])*8 + int(cpf[4])*7 + 
int(cpf[5])*6 + int(cpf[6])*5 + int(cpf[8])*4 + int(cpf[9])*3 + int(cpf[10])*2)*10)%11

validacao2=((int(cpf[0])*11 + int(cpf[1])*10 + int(cpf[2])*9 + int(cpf[4])*8 + 
int(cpf[5])*7 + int(cpf[6])*6 + int(cpf[8])*5 + int(cpf[9])*4 + int(cpf[10])*3+ 
int(cpf[12])*2)*10)%11

if validacao1==10:
    validacao1=0
if validacao2==10:
    validacao2=0

if validacao1==int(cpf[12]) and validacao2==int(cpf[13]):
    print('True')
else:
    raise ValueError('CPF Inválido!!')
  
  
  
  
  
  ################################################################################################################################################
  
  
  
  
  
  """
CPF = 168.995.350-09
------------------------------------------------
1 * 10 = 10           #    1 * 11 = 11 <-
6 * 9  = 54           #    6 * 10 = 60
8 * 8  = 64           #    8 *  9 = 72
9 * 7  = 63           #    9 *  8 = 72
9 * 6  = 54           #    9 *  7 = 63
5 * 5  = 25           #    5 *  6 = 30
3 * 4  = 12           #    3 *  5 = 15
5 * 3  = 15           #    5 *  4 = 20
0 * 2  = 0            #    0 *  3 = 0
                      # -> 0 *  2 = 0
         297          #             343
11 - (297 % 11) = 11  #     11 - (343 % 11) = 9
11 > 9 = 0            #
Digito 1 = 0          #   Digito 2 = 9
"""

# Loop infinito
while True:
    # cpf = '16899535009'
    cpf = input('Digite um CPF: ')

    if len(cpf) != 11 or not cpf.isnumeric():                       # valida se o CPF vai ter 11 numeros inteiros
        print('Inválido')

    else:
        # Loop do CPF
        novo_cpf = cpf[:-2]  # Elimina os dois últimos digitos do CPF
        reverso = 10  # Contador reverso
        total = 0

        for index in range(19):
            if index > 8:                               # Primeiro índice vai de 0 a 9,
                index -= 9                              # São os 9 primeiros digitos do CPF

            total += int(novo_cpf[index]) * reverso     # Valor total da multiplicação
            reverso -= 1                                # Decrementa o contador reverso

            if reverso < 2:
                reverso = 11
                d = 11 - (total % 11)

                if d > 9:                                # Se o digito for > que 9 o valor é 0
                    d = 0
                total = 0                                # Zera o total
                novo_cpf += str(d)                       # Concatena o digito gerado no novo cpf

        # Evita sequencias. Ex.: 11111111111, 00000000000...
        sequencia = novo_cpf == str(novo_cpf[0]) * len(cpf)

        # Descobri que sequências avaliavam como verdadeiro, então também
        # adicionei essa checagem aqui
        if cpf == novo_cpf and not sequencia:
            print('Válido')
        else:
            print('Inválido')




#########################################



cpf = (input ("CPF: "))

def formatcpf(cpf):
    vezes = 0
    novo = ""
    for quantidade in range(11):
        numero = cpf[quantidade]
        novo += numero
        vezes += 1
        if(quantidade == 8):
            novo += "-"
            vezes -= 3
        if(vezes == 3):
            novo += "."
            vezes -= 3
    return novo

print(formatcpf(cpf))




################################################################################################



class Cpf:
    def __init__( self ):
        """ 
        Class to interact with CPF numbers
        """
        pass

    def format( self, cpf ):
        """ 
        Method that formats a brazilian CPF
        
        Tests:
        >>> print Cpf().format('91289037736')
        912.890.377-36
        """
        return "%s.%s.%s-%s" % ( cpf[0:3], cpf[3:6], cpf[6:9], cpf[9:11] )

    def validate( self, cpf ):
        """ 
        Method to validate a brazilian CPF number 
        Based on Pedro Werneck source avaiable at
        www.PythonBrasil.com.br
        
        Tests:
        >>> print Cpf().validate('91289037736')
        True
        >>> print Cpf().validate('91289037731')
        False
        """
        cpf_invalidos = [11*str(i) for i in range(10)]
        if cpf in cpf_invalidos:
            return False
       
        if not cpf.isdigit():
            """ Verifica se o CPF contem pontos e hifens """
            cpf = cpf.replace( ".", "" )
            cpf = cpf.replace( "-", "" )

        if len( cpf ) < 11:
            """ Verifica se o CPF tem 11 digitos """
            return False
            
        if len( cpf ) > 11:
            """ CPF tem que ter 11 digitos """
            return False
            
        selfcpf = [int( x ) for x in cpf]
        
        cpf = selfcpf[:9]
        
        while len( cpf ) < 11:
        
            r =  sum( [( len( cpf )+1-i )*v for i, v in [( x, cpf[x] ) for x in range( len( cpf ) )]] ) % 11
        
            if r > 1:
                f = 11 - r
            else:
                f = 0
            cpf.append( f )
        
        
        return bool( cpf == selfcpf )



##############################################################################


class CPF(BaseDoc):
    """Classe referente ao Cadastro de Pessoas Físicas (CPF)."""

    def __init__(self, repeated_digits: bool = False):
        self.digits = list(range(10))
        self.repeated_digits = repeated_digits

    def validate(self, doc: str = '') -> bool:
        """Validar CPF."""
        if not self._validate_input(doc, ['.', '-']):
            return False

        doc = list(self._only_digits(doc))

        if len(doc) != 11:
            return False

        if not self.repeated_digits and self._check_repeated_digits(doc):
            return False

        return self._generate_first_digit(doc) == doc[9] \
               and self._generate_second_digit(doc) == doc[10]

    def generate(self, mask: bool = False) -> str:
        """Gerar CPF."""
        # Os nove primeiros dígitos
        cpf = [str(sample(self.digits, 1)[0]) for i in range(9)]

        # Gerar os dígitos verificadores
        cpf.append(self._generate_first_digit(cpf))
        cpf.append(self._generate_second_digit(cpf))

        cpf = "".join(cpf)

        return self.mask(cpf) if mask else cpf

    def mask(self, doc: str = '') -> str:
        """Coloca a máscara de CPF na variável doc."""
        return "{}.{}.{}-{}".format(doc[:3], doc[3:6], doc[6:9], doc[-2:])

    def _generate_first_digit(self, doc: list) -> str:
        """Gerar o primeiro dígito verificador do CPF."""
        sum = 0

        for i in range(10, 1, -1):
            sum += int(doc[10 - i]) * i

        sum = (sum * 10) % 11

        if sum == 10:
            sum = 0

        return str(sum)

    def _generate_second_digit(self, doc: list) -> str:
        """Gerar o segundo dígito verificador do CPF."""
        sum = 0

        for i in range(11, 1, -1):
            sum += int(doc[11 - i]) * i

        sum = (sum * 10) % 11

        if sum == 10:
            sum = 0

        return str(sum)

    def _check_repeated_digits(self, doc: List[str]) -> bool:
        """Verifica se é um CPF com números repetidos.
        Exemplo: 111.111.111-11"""
        return len(set(doc)) == 1
